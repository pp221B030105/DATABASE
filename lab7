--1)
--a)
create function inc(a int) returns int as $$
begin
    return a + 1;
end;
    $$ language plpgsql;
select inc(4);
--b)
create function get_sum(a int,b int) returns int as $$
begin
    return a + b;
end;
$$ language plpgsql;
select get_sum(2,3);
--c)
create or replace function div_2(n int) returns bool as $$
    begin
        if n % 2 = 0 then return true;
        else return false;
        end if;
    end;
    $$ language plpgsql;
select div_2(4);
select div_2(5);
--d)
create or replace function password(s varchar) returns bool as $$
    begin
        if s != 'qwerty' then return false;
        else return true;
        end if;
    end;
    $$ language plpgsql;
select password('qwerty');
--e)
create or replace function outp(n int,out plus int,out squ int)  as $$
    begin
        plus = n + 1;
        squ = n * n;
    end;
    $$ language plpgsql;
select * from outp(5);

--2)
--a)
create or replace function time_s() returns trigger as $$
begin
    raise notice '%',now();
    return new;
end
$$ language plpgsql;
--b)
create function age() returns trigger as $$
begin
    raise notice '%', age(now(),new.t);
    return new;
end;
$$ language plpgsql;

create trigger age_t before insert on t1 for each row execute procedure age();
--c
create function tax()
    returns trigger as
$$
begin
    new.cost = new.cost * 1.12;
    return new;
end;
$$
    language plpgsql;


create trigger tax_t before insert on t3 for each row execute procedure tax();
--d
create function stop()
    returns trigger as
$$
begin
    raise exception 'Deletion is not allowed';
end;
$$
    language plpgsql;

create trigger stop_t before delete on table4 execute procedure stop();
--e
create function call()
    returns trigger as
$$
begin
    raise notice '%', validity(new.s);
    raise notice '%', pow(new.a);
    return new;
end;
$$
    language plpgsql;

create trigger call_t before insert on table5 for each row execute procedure call();


create table task4(
    id int, name varchar,
    date_of_birth date,
    age int, salary numeric,
    work_experience int,
    discount numeric
);
--3)
--a
create function
    a(id int,
    name varchar,
    date_of_birth date,
    age int,
    inout salary numeric,
     work_experience int,
     out discount numeric) as
$$
declare
    count int;
begin
    discount = 10;
    count = work_experience/2;
    for step in 1..count loop
            salary = salary * 1.1;
        end loop;
    count = work_experience/5;
    for step in 1..count loop
            discount = discount * 1.01;
        end loop;
    insert into task4 values(id, name, date_of_birth, age, salary, work_experience, discount);
end;
$$
    language plpgsql;

select * from a(1, 'a', '2000-03-02', 22, 1000, 10);
--b
create or replace function
    b(id int, name varchar, date_of_birth date, age int, inout salary numeric, work_experience int, out discount numeric) as
$$
declare
    count int;
begin
    if age >= 40 then salary = salary * 1.15;
    end if;
    discount = 10;
    count = work_experience/2;
    for step in 1..count loop
            salary = salary * 1.1;
        end loop;
    count = work_experience/5;
    for step in 1..count loop
            discount = discount * 1.01;
        end loop;
    if work_experience > 8 then salary = salary * 1.15;
    end if;
    if work_experience > 8 then discount = 20;
    end if;
    insert into task4 values(id, name, date_of_birth, age, salary, work_experience, discount);
end;
$$
    language plpgsql;

select * from b(2, 'b', '2000-03-02', 44, 1000, 10);
